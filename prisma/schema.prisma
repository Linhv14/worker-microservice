// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x", "linux-musl", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  worker
  admin
}

enum Gender {
  male
  female
}

enum Order_status {
  none
  matched
  processing
  done
  cancelled
}

enum Account_status {
  actived
  blocked
}

model Service {
  ID       Int      @id @default(autoincrement())
  user     User[]
  name     String
  order    Order[]
  post     Post[]
  creatAt  DateTime @default(now())
  updateAt DateTime @default(now())
}

model User {
  ID             Int            @id @default(autoincrement())
  defaultAddress String?
  service        Service[]
  order          Order[]
  name           String?
  password       String
  email          String         @unique
  long           Float?
  lat            Float?
  phoneNumber    String?        @unique
  gender         Gender         @default(male)
  age            Int?           @default(18)
  avatar         String?
  role           Role           @default(user)
  status         Account_status @default(actived)
  workingMode    Boolean?       @default(false)
  post           Post[]
  review         Review?
  refreshToken   String?
  creatAt        DateTime       @default(now())
  updateAt       DateTime       @default(now())
}

model Order {
  ID        Int          @id @default(autoincrement())
  user      User[]
  address   String
  service   Service      @relation(fields: [serviceID], references: [ID])
  serviceID Int          @unique
  status    Order_status @default(none)
  amount    Float        @default(0)
  review    Review[]
  creatAt   DateTime     @default(now())
  updateAt  DateTime     @default(now())
}

model Post {
  ID        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userID], references: [ID])
  userID    Int
  address   String?
  long      Float?
  lat       Float?
  service   Service @relation(fields: [serviceID], references: [ID])
  serviceID Int
  content   String

  creatAt  DateTime @default(now())
  updateAt DateTime @updatedAt
}

model Review {
  ID       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userID], references: [ID])
  userID   Int      @unique
  order    Order    @relation(fields: [orderID], references: [ID])
  orderID  Int      @unique
  content  String
  star     Float
  creatAt  DateTime @default(now())
  updateAt DateTime @updatedAt
}
